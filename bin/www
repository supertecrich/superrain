#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config()
let http = require('http')
let throng = require('throng')
let superrainServer = require('../server')

if (process.env.NODE_ENV === 'production' || process.env.NODE_ENV === 'staging') {
    throng({
        workers: 2,
        lifetime: Infinity,
        master: function () {
            console.warn('Production Server Started.')
        },
        start: startServer
    })
} else {
    console.warn('Starting server in debug mode...no cluster')
    startServer()
}

function startServer() {
    /**
     * Get port from environment and store in Express.
     */
    let port = normalizePort(process.env.PORT || '8080')

    /**
     * Create HTTP server wrapped around the websocket server
     */
    let server = http.createServer()
    // This is where the magic happens that allows everthing else downstream to be async
    superrainServer(server).then(() => {
        /**
         * Listen on provided port, on all network interfaces.
         */

        server.listen(port)
        server.on('error', onError)
        server.on('listening', onListening)
    }).catch((err) => onError(err))


    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
        let port = parseInt(val, 10)

        if (isNaN(port)) {
            // named pipe
            return val
        }

        if (port >= 0) {
            // port number
            return port
        }

        return false
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error
        }

        let bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges')
                process.exit(1)
                break
            case 'EADDRINUSE':
                console.error(bind + ' is already in use')
                process.exit(1)
                break
            default:
                throw error
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        let addr = server.address()
        let bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port

        console.warn('SuperRain NOSTR Relay listening at ' + bind + ' ðŸš€')
    }
}