#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config()
let SocketServer = require('../server')
let throng = require('throng')
const {WebSocketServer} = require("ws")

if (process.env.NODE_ENV === 'production' || process.env.NODE_ENV === 'staging') {
  throng({
    workers: 2,
    lifetime: Infinity,
    master: function () {
      console.log('Production Server Started.')
    },
    start: startServer
  })
} else {
  console.log('Starting server in debug mode...no cluster')
  startServer()
}

function startServer() {
  let port = normalizePort(process.env.PORT || '8080')
  let server = new WebSocketServer({port: port})
  
  server.on('connection', SocketServer)
  server.on('error', onError)
  server.on('listening', onListening)

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10)

    if (isNaN(port)) {
      // named pipe
      return val
    }

    if (port >= 0) {
      // port number
      return port
    }

    return false
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges')
        process.exit(1)
        break
      case 'EADDRINUSE':
        console.error(bind + ' is already in use')
        process.exit(1)
        break
      default:
        throw error
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address()
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
  	: 'port ' + addr.port

    console.log('Server listening on ' + bind + ' ðŸš€')
  }
}